version: '3'

# x-common-spark-worker: &common-spark-worker
#   image: bitnami/spark:latest
#   depends_on:
#     - spark
#   environment:
#     - SPARK_MODE=worker
#     - SPARK_MASTER_URL=spark://spark:7077
#     - SPARK_WORKER_MEMORY=1G
#     - SPARK_WORKER_CORES=1
#     - SPARK_RPC_AUTHENTICATION_ENABLED=no
#     - SPARK_RPC_ENCRYPTION_ENABLED=no
#     - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
#     - SPARK_SSL_ENABLED=no
#     - SPARK_USER=spark

services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_DEFAULT_VHOST: /
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 15s
      timeout: 10s
      retries: 2
    networks:
      - invest-sense-network

  rockmongo:
    image: mongo-express
    container_name: rockmongo
    ports:
      - 8082:8081
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_PORT: 27017
    networks:
      - invest-sense-network
    depends_on:
      - mongodb

  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - 27017:27017
    volumes:
      - ./data/mongodb:/data/db
    networks:
      - invest-sense-network

  lake-gateway:
    image: fabiocaffarello/lake-gateway:latest
    container_name: lake-gateway
    ports:
      - 8001:8000
      - 50051:50051
      - 4001:4000
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - invest-sense-network

  lake-controller:
    image: fabiocaffarello/lake-controller:latest
    container_name: lake-controller
    ports:
      - 8002:8000
      - 50054:50051
      - 4002:4000
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://lake-controller:8000/healthz"]
      interval: 10s
      timeout: 1s
      retries: 6
    networks:
      - invest-sense-network

  lake-repository:
    image: fabiocaffarello/lake-repository:latest
    container_name: lake-repository
    ports:
      - 8003:8000
      - 50053:50051
      - 4003:4000
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - invest-sense-network

  lake-events:
    image: fabiocaffarello/lake-events:latest
    container_name: lake-events
    depends_on:
      rabbitmq:
        condition: service_healthy
      lake-controller:
        condition: service_healthy
    networks:
      - invest-sense-network

  lake-outputs:
    image: fabiocaffarello/lake-outputs:latest
    container_name: lake-outputs
    ports:
      - 8004:8000
    networks:
      - invest-sense-network

  lake-catalog:
    image: fabiocaffarello/lake-catalog:latest
    container_name: lake-catalog
    ports:
      - 8005:8000
    networks:
      - invest-sense-network

  ingestors-file-downloader:
    image: fabiocaffarello/ingestors-file-downloader:latest
    container_name: ingestors-file-downloader
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
      lake-controller:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - invest-sense-network

  ingestors-file-unzipper:
    image: fabiocaffarello/ingestors-file-unzipper:latest
    container_name: ingestors-file-unzipper
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - invest-sense-network

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    depends_on:
      - cadvisor
    ports:
      - 9090:9090
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./.docker/observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - invest-sense-network

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - invest-sense-network

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    user: root
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - invest-sense-network

  spark-batch-master:
    image: fabiocaffarello/transformers-spark-batch:latest
    container_name: spark-batch-master
    depends_on:
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
      lake-controller:
        condition: service_healthy
    networks:
      - invest-sense-network

  # minio:
  #   image: bitnami/minio
  #   container_name: minio
  #   ports:
  #     - 9000:9000
  #     - 9001:9001
  #   environment:
  #     MINIO_ACCESS_KEY: minio_access_key
  #     MINIO_SECRET_KEY: minio_secret_key
  #     MINIO_ROOT_USER: new-minio-root-user
  #     MINIO_ROOT_PASSWORD: new-minio-root-password
  #   volumes:
  #     - ./data/minio:/data
  #   networks:
  #     - invest-sense-network
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://minio:9000/minio/health/live"]
  #     interval: 10s
  #     timeout: 1s
  #     retries: 4

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      MINIO_ROOT_USER: new-minio-root-user
      MINIO_ROOT_PASSWORD: new-minio-root-password
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://minio:9000/minio/health/live"]
      interval: 10s
      timeout: 1s
      retries: 4
    volumes:
      - ./data/minio:/data
    networks:
      - invest-sense-network

  spark:
    image: "apache/spark:3.5.0-scala2.12-java11-ubuntu"
    container_name: spark
    command:
      - "/opt/spark/sbin/start-connect-server.sh"
      - "--conf"
      - "spark.driver.extraJavaOptions=-Divy.cache.dir=/tmp -Divy.home=/tmp"
      - "--packages"
      # - "org.apache.spark:spark-connect_2.12:3.4.1,org.apache.iceberg:iceberg-spark-runtime-3.4_2.12:1.3.0,org.projectnessie.nessie-integrations:nessie-spark-extensions-3.4_2.12:0.71.1,org.apache.hadoop/hadoop-aws/3.3.4,com.amazonaws/aws-java-sdk-bundle/1.12.262,net.java.dev.jets3t/jets3t/0.9.4"
      # - "org.apache.spark:spark-connect_2.12:3.4.1,software.amazon.awssdk:url-connection-client:2.17.178,org.apache.hadoop/hadoop-aws/3.3.4,com.amazonaws/aws-java-sdk-bundle/1.12.262,net.java.dev.jets3t/jets3t/0.9.4"
      - "org.apache.spark:spark-connect_2.12:3.5.0,org.apache.iceberg:iceberg-spark-runtime-3.4_2.12:1.3.0,org.apache.hadoop/hadoop-aws/3.3.4,com.amazonaws/aws-java-sdk-bundle/1.12.262,net.java.dev.jets3t/jets3t/0.9.4"
      - "--conf"
      - "spark.sql.extensions=org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions"
      - "--conf"
      - "spark.hadoop.fs.s3a.access.key=k7fK4ZHMhXtzammjr34B"
      - "--conf"
      - "spark.hadoop.fs.s3a.secret.key=LyHAtFNFGkOf6bnhEH69LUeEXXLjyRHlacSrODWZ"
      - "--conf"
      - "spark.hadoop.fs.s3a.impl=org.apache.hadoop.fs.s3a.S3AFileSystem"
      - "--conf"
      - "spark.sql.catalog.iceberg.s3.endpoint=http://minio:9000/"
      - "--conf"
      - "spark.hadoop.fs.s3a.connection.ssl.enabled=false"
      - "--conf"
      - "spark.hadoop.fs.s3a.path.style.access=true"
      - "--conf"
      - "spark.hadoop.fs.s3a.fast.upload=true"
      - "--conf"
      - "spark.hadoop.fs.s3.connection.ssl.enabled=false"
      - "--conf"
      - "spark.hadoop.fs.s3.path.style.access=true"
      - "--conf"
      - "spark.hadoop.fs.s3.fast.upload=true"
      - "--conf"
      - "spark.hadoop.fs.s3.access.key=k7fK4ZHMhXtzammjr34B"
      - "--conf"
      - "spark.hadoop.fs.s3.secret.key=LyHAtFNFGkOf6bnhEH69LUeEXXLjyRHlacSrODWZ"
      - "--conf"
      - "spark.hadoop.fs.s3.impl=org.apache.hadoop.fs.s3a.S3AFileSystem"
    environment:
      - SPARK_NO_DAEMONIZE=true
      - AWS_ACCESS_KEY_ID=k7fK4ZHMhXtzammjr34B
      - AWS_SECRET_ACCESS_KEY=LyHAtFNFGkOf6bnhEH69LUeEXXLjyRHlacSrODWZ
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_REGION=us-east-1
      - MINIO_REGION=us-east-1
      - AWS_S3_ENDPOINT=http://minio:9000
      - NESSIE_URI=http://nessie:19120/api/v1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "4040:4040"
      - "15002:15002"
    networks:
      - invest-sense-network

  # nessie:
  #   image: projectnessie/nessie
  #   container_name: nessie
  #   ports:
  #     - "19120:19120"
  #   networks:
  #     - invest-sense-network

  # dremio:
  #   platform: linux/x86_64
  #   image: dremio/dremio-oss:latest
  #   container_name: dremio
  #   ports:
  #     - "9047:9047"
  #     - "31010:31010"
  #     - "45678:45678"
  #   networks:
  #     - invest-sense-network


  # spark-worker-1:
  #   container_name: spark-worker-1
  #   <<: *common-spark-worker

  # spark-worker-2:
  #   container_name: spark-worker-2
  #   <<: *common-spark-worker

  # trino:
  #   hostname: trino
  #   container_name: trino
  #   image: 'trinodb/trino:351'
  #   ports:
  #     - '8085:8080'
  #   volumes:
  #     - ./.docker/trino/etc:/usr/lib/trino/etc:ro
  #   networks:
  #     - invest-sense-network

  # mariadb:
  #   hostname: mariadb
  #   image: mariadb:10.5.8
  #   container_name: mariadb
  #   ports:
  #     - 3306:3306
  #   environment:
  #     MYSQL_ROOT_PASSWORD: admin
  #     MYSQL_USER: admin
  #     MYSQL_PASSWORD: admin
  #     MYSQL_DATABASE: metastore_db
  #   networks:
  #     - invest-sense-network

  # hive-metastore:
  #   hostname: hive-metastore
  #   image: 'bitsondatadev/hive-metastore:latest'
  #   container_name: hive-metastore
  #   ports:
  #     - '9083:9083' # Metastore Thrift
  #   volumes:
  #     - ./.docker/hive/conf/metastore-site.xml:/opt/apache-hive-metastore-3.0.0-bin/conf/metastore-site.xml:ro
  #   environment:
  #     METASTORE_DB_HOSTNAME: mariadb
  #   depends_on:
  #     - mariadb
  #   networks:
  #     - invest-sense-network

networks:
  invest-sense-network:
    name: invest-sense-network
    driver: bridge

volumes:
  minio_data:
